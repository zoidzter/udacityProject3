# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  slack: circleci/slack@4.4.4
  aws-cli: circleci/aws-cli@2.0

commands:
  destroy-env:
    steps:
      # - run:
      #    name: AWS CLI setup
      #    when: on_fail
      #    command: |
      #      yum -y install unzip
      #      curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      #      unzip awscliv2.zip
      #      ./aws/install
      - run:
          name: Destroy Environment on Fail
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "backend-infra-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "frontend-infra-${CIRCLE_WORKFLOW_ID:0:7}"

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - run:
          command: | 
            echo "updating Status to fail"
            BUILD_STATUS="fail"
          when: on_fail
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run: 
          name: Test front-end
          command: |
            cd frontend
            npm i
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run: 
          name: Test back-end
          command: |
            cd backend
            npm i
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run: 
          name: Scan front-end
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run: 
          name: Scan back-end
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan

  deploy-infrastructure:
    docker:
       - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Install tar and gzip"
          command: |
            yum -y install tar
            yum -y install gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacityProject3 \
              --stack-name "backend-infra-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacityProject3 \
              --stack-name "frontend-infra-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
                BACKEND_EC2_IP=`aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
                        --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}"  --output text`
                curl -H "Content-Type: text/plain" -H "token: d7214dda-7b1f-4507-b39e-66c4eee75bbf" \
                        --request PUT --data `echo $BACKEND_EC2_IP` https://api.memstash.io/values/backendIP 
                echo $BACKEND_EC2_IP >> .circleci/ansible/inventory.txt
                echo "BACKEND_EC2_IP: " $BACKEND_EC2_IP
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-env      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
     - checkout
     - add_ssh_keys:
         fingerprints: 
           - "60:2a:dd:e9:96:36:9e:fa:f6:1f:31:75:df:aa:cd:0b"
     - attach_workspace:
         at: ~/
     - run:
         name: Install dependencies
         command: |
           pip install awscli
           apk add --update ansible
     - run:
         name: Configure server
         command: |
           ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
     - destroy-env

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build
      - run:
          name: Send migration results to memstash
          command: |
            echo "RES value to send to memstash: $RES"
            curl -H "Content-Type: text/plain" -H "token: 333a9d13-006e-4b7d-9796-e6f757ff0ed8" \
                --request PUT --data `echo $RES` https://api.memstash.io/values/migrationRes
      #- destroy-env        

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=`curl -H "Content-Type: text/plain" -H "token: d7214dda-7b1f-4507-b39e-66c4eee75bbf" \
                        --request GET https://api.memstash.io/values/backendIP`
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
      - run:
          name: S3 copy objects
          command: |
            aws s3 cp ./dist/* s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-env
                 
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "5f:95:9b:86:8b:2a:fb:e7:f1:ff:c0:dd:f0:99:20:ae"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            # your code here
      - destroy-env  

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - test-frontend
      - scan-backend:
          requires:
            - test-backend
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          #filters:
          #  branches:
          #    only: [test-feature-branch]
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
              - configure-infrastructure
